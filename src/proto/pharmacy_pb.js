// source: pharmacy.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.pharmacy.CreatePharmacyRequest', null, global);
goog.exportSymbol('proto.pharmacy.CreateSubsidiaryRequest', null, global);
goog.exportSymbol('proto.pharmacy.Empty', null, global);
goog.exportSymbol('proto.pharmacy.GetAllPharmacysRequest', null, global);
goog.exportSymbol('proto.pharmacy.GetAllSubsidiarysRequest', null, global);
goog.exportSymbol('proto.pharmacy.GetPharmacyByIdRequest', null, global);
goog.exportSymbol('proto.pharmacy.GetPharmacyByNameRequest', null, global);
goog.exportSymbol('proto.pharmacy.GetSubsidiaryByIdRequest', null, global);
goog.exportSymbol('proto.pharmacy.GetSubsidiaryByNameRequest', null, global);
goog.exportSymbol('proto.pharmacy.Pharmacy', null, global);
goog.exportSymbol('proto.pharmacy.PharmacyResponse', null, global);
goog.exportSymbol('proto.pharmacy.PharmacysListResponse', null, global);
goog.exportSymbol('proto.pharmacy.Subsidiary', null, global);
goog.exportSymbol('proto.pharmacy.SubsidiaryResponse', null, global);
goog.exportSymbol('proto.pharmacy.SubsidiarysListResponse', null, global);
goog.exportSymbol('proto.pharmacy.UpdatePharmacyData', null, global);
goog.exportSymbol('proto.pharmacy.UpdatePharmacyDataRequest', null, global);
goog.exportSymbol('proto.pharmacy.UpdateSubsidiaryData', null, global);
goog.exportSymbol('proto.pharmacy.UpdateSubsidiaryDataRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pharmacy.Pharmacy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pharmacy.Pharmacy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pharmacy.Pharmacy.displayName = 'proto.pharmacy.Pharmacy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pharmacy.UpdatePharmacyData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pharmacy.UpdatePharmacyData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pharmacy.UpdatePharmacyData.displayName = 'proto.pharmacy.UpdatePharmacyData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pharmacy.CreatePharmacyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pharmacy.CreatePharmacyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pharmacy.CreatePharmacyRequest.displayName = 'proto.pharmacy.CreatePharmacyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pharmacy.GetPharmacyByNameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pharmacy.GetPharmacyByNameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pharmacy.GetPharmacyByNameRequest.displayName = 'proto.pharmacy.GetPharmacyByNameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pharmacy.GetAllPharmacysRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pharmacy.GetAllPharmacysRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pharmacy.GetAllPharmacysRequest.displayName = 'proto.pharmacy.GetAllPharmacysRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pharmacy.GetPharmacyByIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pharmacy.GetPharmacyByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pharmacy.GetPharmacyByIdRequest.displayName = 'proto.pharmacy.GetPharmacyByIdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pharmacy.UpdatePharmacyDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pharmacy.UpdatePharmacyDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pharmacy.UpdatePharmacyDataRequest.displayName = 'proto.pharmacy.UpdatePharmacyDataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pharmacy.PharmacyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pharmacy.PharmacyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pharmacy.PharmacyResponse.displayName = 'proto.pharmacy.PharmacyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pharmacy.PharmacysListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pharmacy.PharmacysListResponse.repeatedFields_, null);
};
goog.inherits(proto.pharmacy.PharmacysListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pharmacy.PharmacysListResponse.displayName = 'proto.pharmacy.PharmacysListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pharmacy.Subsidiary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pharmacy.Subsidiary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pharmacy.Subsidiary.displayName = 'proto.pharmacy.Subsidiary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pharmacy.UpdateSubsidiaryData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pharmacy.UpdateSubsidiaryData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pharmacy.UpdateSubsidiaryData.displayName = 'proto.pharmacy.UpdateSubsidiaryData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pharmacy.CreateSubsidiaryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pharmacy.CreateSubsidiaryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pharmacy.CreateSubsidiaryRequest.displayName = 'proto.pharmacy.CreateSubsidiaryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pharmacy.GetSubsidiaryByNameRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pharmacy.GetSubsidiaryByNameRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pharmacy.GetSubsidiaryByNameRequest.displayName = 'proto.pharmacy.GetSubsidiaryByNameRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pharmacy.GetAllSubsidiarysRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pharmacy.GetAllSubsidiarysRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pharmacy.GetAllSubsidiarysRequest.displayName = 'proto.pharmacy.GetAllSubsidiarysRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pharmacy.GetSubsidiaryByIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pharmacy.GetSubsidiaryByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pharmacy.GetSubsidiaryByIdRequest.displayName = 'proto.pharmacy.GetSubsidiaryByIdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pharmacy.UpdateSubsidiaryDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pharmacy.UpdateSubsidiaryDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pharmacy.UpdateSubsidiaryDataRequest.displayName = 'proto.pharmacy.UpdateSubsidiaryDataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pharmacy.SubsidiaryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pharmacy.SubsidiaryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pharmacy.SubsidiaryResponse.displayName = 'proto.pharmacy.SubsidiaryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pharmacy.SubsidiarysListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pharmacy.SubsidiarysListResponse.repeatedFields_, null);
};
goog.inherits(proto.pharmacy.SubsidiarysListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pharmacy.SubsidiarysListResponse.displayName = 'proto.pharmacy.SubsidiarysListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pharmacy.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pharmacy.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.pharmacy.Empty.displayName = 'proto.pharmacy.Empty';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pharmacy.Pharmacy.prototype.toObject = function(opt_includeInstance) {
  return proto.pharmacy.Pharmacy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pharmacy.Pharmacy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.Pharmacy.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    logo: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nome: jspb.Message.getFieldWithDefault(msg, 3, ""),
    cnpj: jspb.Message.getFieldWithDefault(msg, 4, ""),
    endereco: jspb.Message.getFieldWithDefault(msg, 5, ""),
    horariodefuncionamento: jspb.Message.getFieldWithDefault(msg, 6, ""),
    responsavel: jspb.Message.getFieldWithDefault(msg, 7, ""),
    telefone: jspb.Message.getFieldWithDefault(msg, 8, ""),
    outros: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pharmacy.Pharmacy}
 */
proto.pharmacy.Pharmacy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pharmacy.Pharmacy;
  return proto.pharmacy.Pharmacy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pharmacy.Pharmacy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pharmacy.Pharmacy}
 */
proto.pharmacy.Pharmacy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNome(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCnpj(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndereco(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHorariodefuncionamento(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponsavel(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTelefone(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutros(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pharmacy.Pharmacy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pharmacy.Pharmacy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pharmacy.Pharmacy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.Pharmacy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLogo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNome();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCnpj();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEndereco();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getHorariodefuncionamento();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getResponsavel();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTelefone();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getOutros();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.pharmacy.Pharmacy.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pharmacy.Pharmacy} returns this
 */
proto.pharmacy.Pharmacy.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string logo = 2;
 * @return {string}
 */
proto.pharmacy.Pharmacy.prototype.getLogo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.Pharmacy} returns this
 */
proto.pharmacy.Pharmacy.prototype.setLogo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string nome = 3;
 * @return {string}
 */
proto.pharmacy.Pharmacy.prototype.getNome = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.Pharmacy} returns this
 */
proto.pharmacy.Pharmacy.prototype.setNome = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string cnpj = 4;
 * @return {string}
 */
proto.pharmacy.Pharmacy.prototype.getCnpj = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.Pharmacy} returns this
 */
proto.pharmacy.Pharmacy.prototype.setCnpj = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string endereco = 5;
 * @return {string}
 */
proto.pharmacy.Pharmacy.prototype.getEndereco = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.Pharmacy} returns this
 */
proto.pharmacy.Pharmacy.prototype.setEndereco = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string horarioDeFuncionamento = 6;
 * @return {string}
 */
proto.pharmacy.Pharmacy.prototype.getHorariodefuncionamento = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.Pharmacy} returns this
 */
proto.pharmacy.Pharmacy.prototype.setHorariodefuncionamento = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string responsavel = 7;
 * @return {string}
 */
proto.pharmacy.Pharmacy.prototype.getResponsavel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.Pharmacy} returns this
 */
proto.pharmacy.Pharmacy.prototype.setResponsavel = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string telefone = 8;
 * @return {string}
 */
proto.pharmacy.Pharmacy.prototype.getTelefone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.Pharmacy} returns this
 */
proto.pharmacy.Pharmacy.prototype.setTelefone = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string outros = 9;
 * @return {string}
 */
proto.pharmacy.Pharmacy.prototype.getOutros = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.Pharmacy} returns this
 */
proto.pharmacy.Pharmacy.prototype.setOutros = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pharmacy.UpdatePharmacyData.prototype.toObject = function(opt_includeInstance) {
  return proto.pharmacy.UpdatePharmacyData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pharmacy.UpdatePharmacyData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.UpdatePharmacyData.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    logo: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nome: jspb.Message.getFieldWithDefault(msg, 3, ""),
    endereco: jspb.Message.getFieldWithDefault(msg, 4, ""),
    horariodefuncionamento: jspb.Message.getFieldWithDefault(msg, 5, ""),
    responsavel: jspb.Message.getFieldWithDefault(msg, 6, ""),
    telefone: jspb.Message.getFieldWithDefault(msg, 7, ""),
    outros: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pharmacy.UpdatePharmacyData}
 */
proto.pharmacy.UpdatePharmacyData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pharmacy.UpdatePharmacyData;
  return proto.pharmacy.UpdatePharmacyData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pharmacy.UpdatePharmacyData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pharmacy.UpdatePharmacyData}
 */
proto.pharmacy.UpdatePharmacyData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNome(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndereco(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setHorariodefuncionamento(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponsavel(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTelefone(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutros(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pharmacy.UpdatePharmacyData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pharmacy.UpdatePharmacyData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pharmacy.UpdatePharmacyData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.UpdatePharmacyData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLogo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNome();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEndereco();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getHorariodefuncionamento();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getResponsavel();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTelefone();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getOutros();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.pharmacy.UpdatePharmacyData.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pharmacy.UpdatePharmacyData} returns this
 */
proto.pharmacy.UpdatePharmacyData.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string logo = 2;
 * @return {string}
 */
proto.pharmacy.UpdatePharmacyData.prototype.getLogo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.UpdatePharmacyData} returns this
 */
proto.pharmacy.UpdatePharmacyData.prototype.setLogo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string nome = 3;
 * @return {string}
 */
proto.pharmacy.UpdatePharmacyData.prototype.getNome = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.UpdatePharmacyData} returns this
 */
proto.pharmacy.UpdatePharmacyData.prototype.setNome = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string endereco = 4;
 * @return {string}
 */
proto.pharmacy.UpdatePharmacyData.prototype.getEndereco = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.UpdatePharmacyData} returns this
 */
proto.pharmacy.UpdatePharmacyData.prototype.setEndereco = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string horarioDeFuncionamento = 5;
 * @return {string}
 */
proto.pharmacy.UpdatePharmacyData.prototype.getHorariodefuncionamento = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.UpdatePharmacyData} returns this
 */
proto.pharmacy.UpdatePharmacyData.prototype.setHorariodefuncionamento = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string responsavel = 6;
 * @return {string}
 */
proto.pharmacy.UpdatePharmacyData.prototype.getResponsavel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.UpdatePharmacyData} returns this
 */
proto.pharmacy.UpdatePharmacyData.prototype.setResponsavel = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string telefone = 7;
 * @return {string}
 */
proto.pharmacy.UpdatePharmacyData.prototype.getTelefone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.UpdatePharmacyData} returns this
 */
proto.pharmacy.UpdatePharmacyData.prototype.setTelefone = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string outros = 8;
 * @return {string}
 */
proto.pharmacy.UpdatePharmacyData.prototype.getOutros = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.UpdatePharmacyData} returns this
 */
proto.pharmacy.UpdatePharmacyData.prototype.setOutros = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pharmacy.CreatePharmacyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pharmacy.CreatePharmacyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pharmacy.CreatePharmacyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.CreatePharmacyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pharmacy: (f = msg.getPharmacy()) && proto.pharmacy.Pharmacy.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pharmacy.CreatePharmacyRequest}
 */
proto.pharmacy.CreatePharmacyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pharmacy.CreatePharmacyRequest;
  return proto.pharmacy.CreatePharmacyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pharmacy.CreatePharmacyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pharmacy.CreatePharmacyRequest}
 */
proto.pharmacy.CreatePharmacyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pharmacy.Pharmacy;
      reader.readMessage(value,proto.pharmacy.Pharmacy.deserializeBinaryFromReader);
      msg.setPharmacy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pharmacy.CreatePharmacyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pharmacy.CreatePharmacyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pharmacy.CreatePharmacyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.CreatePharmacyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPharmacy();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pharmacy.Pharmacy.serializeBinaryToWriter
    );
  }
};


/**
 * optional Pharmacy pharmacy = 1;
 * @return {?proto.pharmacy.Pharmacy}
 */
proto.pharmacy.CreatePharmacyRequest.prototype.getPharmacy = function() {
  return /** @type{?proto.pharmacy.Pharmacy} */ (
    jspb.Message.getWrapperField(this, proto.pharmacy.Pharmacy, 1));
};


/**
 * @param {?proto.pharmacy.Pharmacy|undefined} value
 * @return {!proto.pharmacy.CreatePharmacyRequest} returns this
*/
proto.pharmacy.CreatePharmacyRequest.prototype.setPharmacy = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pharmacy.CreatePharmacyRequest} returns this
 */
proto.pharmacy.CreatePharmacyRequest.prototype.clearPharmacy = function() {
  return this.setPharmacy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pharmacy.CreatePharmacyRequest.prototype.hasPharmacy = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pharmacy.GetPharmacyByNameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pharmacy.GetPharmacyByNameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pharmacy.GetPharmacyByNameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.GetPharmacyByNameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nome: jspb.Message.getFieldWithDefault(msg, 1, ""),
    page: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pharmacy.GetPharmacyByNameRequest}
 */
proto.pharmacy.GetPharmacyByNameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pharmacy.GetPharmacyByNameRequest;
  return proto.pharmacy.GetPharmacyByNameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pharmacy.GetPharmacyByNameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pharmacy.GetPharmacyByNameRequest}
 */
proto.pharmacy.GetPharmacyByNameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNome(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pharmacy.GetPharmacyByNameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pharmacy.GetPharmacyByNameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pharmacy.GetPharmacyByNameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.GetPharmacyByNameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNome();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string nome = 1;
 * @return {string}
 */
proto.pharmacy.GetPharmacyByNameRequest.prototype.getNome = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.GetPharmacyByNameRequest} returns this
 */
proto.pharmacy.GetPharmacyByNameRequest.prototype.setNome = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string page = 2;
 * @return {string}
 */
proto.pharmacy.GetPharmacyByNameRequest.prototype.getPage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.GetPharmacyByNameRequest} returns this
 */
proto.pharmacy.GetPharmacyByNameRequest.prototype.setPage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pharmacy.GetAllPharmacysRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pharmacy.GetAllPharmacysRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pharmacy.GetAllPharmacysRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.GetAllPharmacysRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pharmacy.GetAllPharmacysRequest}
 */
proto.pharmacy.GetAllPharmacysRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pharmacy.GetAllPharmacysRequest;
  return proto.pharmacy.GetAllPharmacysRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pharmacy.GetAllPharmacysRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pharmacy.GetAllPharmacysRequest}
 */
proto.pharmacy.GetAllPharmacysRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pharmacy.GetAllPharmacysRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pharmacy.GetAllPharmacysRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pharmacy.GetAllPharmacysRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.GetAllPharmacysRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string page = 1;
 * @return {string}
 */
proto.pharmacy.GetAllPharmacysRequest.prototype.getPage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.GetAllPharmacysRequest} returns this
 */
proto.pharmacy.GetAllPharmacysRequest.prototype.setPage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pharmacy.GetPharmacyByIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pharmacy.GetPharmacyByIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pharmacy.GetPharmacyByIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.GetPharmacyByIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pharmacy.GetPharmacyByIdRequest}
 */
proto.pharmacy.GetPharmacyByIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pharmacy.GetPharmacyByIdRequest;
  return proto.pharmacy.GetPharmacyByIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pharmacy.GetPharmacyByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pharmacy.GetPharmacyByIdRequest}
 */
proto.pharmacy.GetPharmacyByIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pharmacy.GetPharmacyByIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pharmacy.GetPharmacyByIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pharmacy.GetPharmacyByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.GetPharmacyByIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.pharmacy.GetPharmacyByIdRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pharmacy.GetPharmacyByIdRequest} returns this
 */
proto.pharmacy.GetPharmacyByIdRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pharmacy.UpdatePharmacyDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pharmacy.UpdatePharmacyDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pharmacy.UpdatePharmacyDataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.UpdatePharmacyDataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pharmacy: (f = msg.getPharmacy()) && proto.pharmacy.UpdatePharmacyData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pharmacy.UpdatePharmacyDataRequest}
 */
proto.pharmacy.UpdatePharmacyDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pharmacy.UpdatePharmacyDataRequest;
  return proto.pharmacy.UpdatePharmacyDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pharmacy.UpdatePharmacyDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pharmacy.UpdatePharmacyDataRequest}
 */
proto.pharmacy.UpdatePharmacyDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.pharmacy.UpdatePharmacyData;
      reader.readMessage(value,proto.pharmacy.UpdatePharmacyData.deserializeBinaryFromReader);
      msg.setPharmacy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pharmacy.UpdatePharmacyDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pharmacy.UpdatePharmacyDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pharmacy.UpdatePharmacyDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.UpdatePharmacyDataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPharmacy();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pharmacy.UpdatePharmacyData.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.pharmacy.UpdatePharmacyDataRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pharmacy.UpdatePharmacyDataRequest} returns this
 */
proto.pharmacy.UpdatePharmacyDataRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional UpdatePharmacyData pharmacy = 2;
 * @return {?proto.pharmacy.UpdatePharmacyData}
 */
proto.pharmacy.UpdatePharmacyDataRequest.prototype.getPharmacy = function() {
  return /** @type{?proto.pharmacy.UpdatePharmacyData} */ (
    jspb.Message.getWrapperField(this, proto.pharmacy.UpdatePharmacyData, 2));
};


/**
 * @param {?proto.pharmacy.UpdatePharmacyData|undefined} value
 * @return {!proto.pharmacy.UpdatePharmacyDataRequest} returns this
*/
proto.pharmacy.UpdatePharmacyDataRequest.prototype.setPharmacy = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pharmacy.UpdatePharmacyDataRequest} returns this
 */
proto.pharmacy.UpdatePharmacyDataRequest.prototype.clearPharmacy = function() {
  return this.setPharmacy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pharmacy.UpdatePharmacyDataRequest.prototype.hasPharmacy = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pharmacy.PharmacyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pharmacy.PharmacyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pharmacy.PharmacyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.PharmacyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pharmacy: (f = msg.getPharmacy()) && proto.pharmacy.Pharmacy.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pharmacy.PharmacyResponse}
 */
proto.pharmacy.PharmacyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pharmacy.PharmacyResponse;
  return proto.pharmacy.PharmacyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pharmacy.PharmacyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pharmacy.PharmacyResponse}
 */
proto.pharmacy.PharmacyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pharmacy.Pharmacy;
      reader.readMessage(value,proto.pharmacy.Pharmacy.deserializeBinaryFromReader);
      msg.setPharmacy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pharmacy.PharmacyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pharmacy.PharmacyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pharmacy.PharmacyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.PharmacyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPharmacy();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pharmacy.Pharmacy.serializeBinaryToWriter
    );
  }
};


/**
 * optional Pharmacy pharmacy = 1;
 * @return {?proto.pharmacy.Pharmacy}
 */
proto.pharmacy.PharmacyResponse.prototype.getPharmacy = function() {
  return /** @type{?proto.pharmacy.Pharmacy} */ (
    jspb.Message.getWrapperField(this, proto.pharmacy.Pharmacy, 1));
};


/**
 * @param {?proto.pharmacy.Pharmacy|undefined} value
 * @return {!proto.pharmacy.PharmacyResponse} returns this
*/
proto.pharmacy.PharmacyResponse.prototype.setPharmacy = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pharmacy.PharmacyResponse} returns this
 */
proto.pharmacy.PharmacyResponse.prototype.clearPharmacy = function() {
  return this.setPharmacy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pharmacy.PharmacyResponse.prototype.hasPharmacy = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pharmacy.PharmacysListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pharmacy.PharmacysListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pharmacy.PharmacysListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pharmacy.PharmacysListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.PharmacysListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pharmacysList: jspb.Message.toObjectList(msg.getPharmacysList(),
    proto.pharmacy.Pharmacy.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pharmacy.PharmacysListResponse}
 */
proto.pharmacy.PharmacysListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pharmacy.PharmacysListResponse;
  return proto.pharmacy.PharmacysListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pharmacy.PharmacysListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pharmacy.PharmacysListResponse}
 */
proto.pharmacy.PharmacysListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pharmacy.Pharmacy;
      reader.readMessage(value,proto.pharmacy.Pharmacy.deserializeBinaryFromReader);
      msg.addPharmacys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pharmacy.PharmacysListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pharmacy.PharmacysListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pharmacy.PharmacysListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.PharmacysListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPharmacysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pharmacy.Pharmacy.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Pharmacy pharmacys = 1;
 * @return {!Array<!proto.pharmacy.Pharmacy>}
 */
proto.pharmacy.PharmacysListResponse.prototype.getPharmacysList = function() {
  return /** @type{!Array<!proto.pharmacy.Pharmacy>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pharmacy.Pharmacy, 1));
};


/**
 * @param {!Array<!proto.pharmacy.Pharmacy>} value
 * @return {!proto.pharmacy.PharmacysListResponse} returns this
*/
proto.pharmacy.PharmacysListResponse.prototype.setPharmacysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pharmacy.Pharmacy=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pharmacy.Pharmacy}
 */
proto.pharmacy.PharmacysListResponse.prototype.addPharmacys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pharmacy.Pharmacy, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pharmacy.PharmacysListResponse} returns this
 */
proto.pharmacy.PharmacysListResponse.prototype.clearPharmacysList = function() {
  return this.setPharmacysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pharmacy.Subsidiary.prototype.toObject = function(opt_includeInstance) {
  return proto.pharmacy.Subsidiary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pharmacy.Subsidiary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.Subsidiary.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    logo: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nome: jspb.Message.getFieldWithDefault(msg, 3, ""),
    cnpj: jspb.Message.getFieldWithDefault(msg, 4, ""),
    endereco: jspb.Message.getFieldWithDefault(msg, 5, ""),
    horariodefuncionamento: jspb.Message.getFieldWithDefault(msg, 6, ""),
    responsavel: jspb.Message.getFieldWithDefault(msg, 7, ""),
    telefone: jspb.Message.getFieldWithDefault(msg, 8, ""),
    outros: jspb.Message.getFieldWithDefault(msg, 9, ""),
    farmaciaId: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pharmacy.Subsidiary}
 */
proto.pharmacy.Subsidiary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pharmacy.Subsidiary;
  return proto.pharmacy.Subsidiary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pharmacy.Subsidiary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pharmacy.Subsidiary}
 */
proto.pharmacy.Subsidiary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNome(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCnpj(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndereco(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHorariodefuncionamento(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponsavel(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTelefone(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutros(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFarmaciaId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pharmacy.Subsidiary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pharmacy.Subsidiary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pharmacy.Subsidiary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.Subsidiary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLogo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNome();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCnpj();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEndereco();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getHorariodefuncionamento();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getResponsavel();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTelefone();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getOutros();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getFarmaciaId();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.pharmacy.Subsidiary.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pharmacy.Subsidiary} returns this
 */
proto.pharmacy.Subsidiary.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string logo = 2;
 * @return {string}
 */
proto.pharmacy.Subsidiary.prototype.getLogo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.Subsidiary} returns this
 */
proto.pharmacy.Subsidiary.prototype.setLogo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string nome = 3;
 * @return {string}
 */
proto.pharmacy.Subsidiary.prototype.getNome = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.Subsidiary} returns this
 */
proto.pharmacy.Subsidiary.prototype.setNome = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string cnpj = 4;
 * @return {string}
 */
proto.pharmacy.Subsidiary.prototype.getCnpj = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.Subsidiary} returns this
 */
proto.pharmacy.Subsidiary.prototype.setCnpj = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string endereco = 5;
 * @return {string}
 */
proto.pharmacy.Subsidiary.prototype.getEndereco = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.Subsidiary} returns this
 */
proto.pharmacy.Subsidiary.prototype.setEndereco = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string horarioDeFuncionamento = 6;
 * @return {string}
 */
proto.pharmacy.Subsidiary.prototype.getHorariodefuncionamento = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.Subsidiary} returns this
 */
proto.pharmacy.Subsidiary.prototype.setHorariodefuncionamento = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string responsavel = 7;
 * @return {string}
 */
proto.pharmacy.Subsidiary.prototype.getResponsavel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.Subsidiary} returns this
 */
proto.pharmacy.Subsidiary.prototype.setResponsavel = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string telefone = 8;
 * @return {string}
 */
proto.pharmacy.Subsidiary.prototype.getTelefone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.Subsidiary} returns this
 */
proto.pharmacy.Subsidiary.prototype.setTelefone = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string outros = 9;
 * @return {string}
 */
proto.pharmacy.Subsidiary.prototype.getOutros = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.Subsidiary} returns this
 */
proto.pharmacy.Subsidiary.prototype.setOutros = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int32 farmacia_id = 10;
 * @return {number}
 */
proto.pharmacy.Subsidiary.prototype.getFarmaciaId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.pharmacy.Subsidiary} returns this
 */
proto.pharmacy.Subsidiary.prototype.setFarmaciaId = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pharmacy.UpdateSubsidiaryData.prototype.toObject = function(opt_includeInstance) {
  return proto.pharmacy.UpdateSubsidiaryData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pharmacy.UpdateSubsidiaryData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.UpdateSubsidiaryData.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    logo: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nome: jspb.Message.getFieldWithDefault(msg, 3, ""),
    endereco: jspb.Message.getFieldWithDefault(msg, 4, ""),
    horariodefuncionamento: jspb.Message.getFieldWithDefault(msg, 5, ""),
    responsavel: jspb.Message.getFieldWithDefault(msg, 6, ""),
    telefone: jspb.Message.getFieldWithDefault(msg, 7, ""),
    outros: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pharmacy.UpdateSubsidiaryData}
 */
proto.pharmacy.UpdateSubsidiaryData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pharmacy.UpdateSubsidiaryData;
  return proto.pharmacy.UpdateSubsidiaryData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pharmacy.UpdateSubsidiaryData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pharmacy.UpdateSubsidiaryData}
 */
proto.pharmacy.UpdateSubsidiaryData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNome(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndereco(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setHorariodefuncionamento(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponsavel(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTelefone(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutros(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pharmacy.UpdateSubsidiaryData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pharmacy.UpdateSubsidiaryData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pharmacy.UpdateSubsidiaryData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.UpdateSubsidiaryData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLogo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNome();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEndereco();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getHorariodefuncionamento();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getResponsavel();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTelefone();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getOutros();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.pharmacy.UpdateSubsidiaryData.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pharmacy.UpdateSubsidiaryData} returns this
 */
proto.pharmacy.UpdateSubsidiaryData.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string logo = 2;
 * @return {string}
 */
proto.pharmacy.UpdateSubsidiaryData.prototype.getLogo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.UpdateSubsidiaryData} returns this
 */
proto.pharmacy.UpdateSubsidiaryData.prototype.setLogo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string nome = 3;
 * @return {string}
 */
proto.pharmacy.UpdateSubsidiaryData.prototype.getNome = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.UpdateSubsidiaryData} returns this
 */
proto.pharmacy.UpdateSubsidiaryData.prototype.setNome = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string endereco = 4;
 * @return {string}
 */
proto.pharmacy.UpdateSubsidiaryData.prototype.getEndereco = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.UpdateSubsidiaryData} returns this
 */
proto.pharmacy.UpdateSubsidiaryData.prototype.setEndereco = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string horarioDeFuncionamento = 5;
 * @return {string}
 */
proto.pharmacy.UpdateSubsidiaryData.prototype.getHorariodefuncionamento = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.UpdateSubsidiaryData} returns this
 */
proto.pharmacy.UpdateSubsidiaryData.prototype.setHorariodefuncionamento = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string responsavel = 6;
 * @return {string}
 */
proto.pharmacy.UpdateSubsidiaryData.prototype.getResponsavel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.UpdateSubsidiaryData} returns this
 */
proto.pharmacy.UpdateSubsidiaryData.prototype.setResponsavel = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string telefone = 7;
 * @return {string}
 */
proto.pharmacy.UpdateSubsidiaryData.prototype.getTelefone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.UpdateSubsidiaryData} returns this
 */
proto.pharmacy.UpdateSubsidiaryData.prototype.setTelefone = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string outros = 8;
 * @return {string}
 */
proto.pharmacy.UpdateSubsidiaryData.prototype.getOutros = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.UpdateSubsidiaryData} returns this
 */
proto.pharmacy.UpdateSubsidiaryData.prototype.setOutros = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pharmacy.CreateSubsidiaryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pharmacy.CreateSubsidiaryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pharmacy.CreateSubsidiaryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.CreateSubsidiaryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subsidiary: (f = msg.getSubsidiary()) && proto.pharmacy.Subsidiary.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pharmacy.CreateSubsidiaryRequest}
 */
proto.pharmacy.CreateSubsidiaryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pharmacy.CreateSubsidiaryRequest;
  return proto.pharmacy.CreateSubsidiaryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pharmacy.CreateSubsidiaryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pharmacy.CreateSubsidiaryRequest}
 */
proto.pharmacy.CreateSubsidiaryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pharmacy.Subsidiary;
      reader.readMessage(value,proto.pharmacy.Subsidiary.deserializeBinaryFromReader);
      msg.setSubsidiary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pharmacy.CreateSubsidiaryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pharmacy.CreateSubsidiaryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pharmacy.CreateSubsidiaryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.CreateSubsidiaryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubsidiary();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pharmacy.Subsidiary.serializeBinaryToWriter
    );
  }
};


/**
 * optional Subsidiary subsidiary = 1;
 * @return {?proto.pharmacy.Subsidiary}
 */
proto.pharmacy.CreateSubsidiaryRequest.prototype.getSubsidiary = function() {
  return /** @type{?proto.pharmacy.Subsidiary} */ (
    jspb.Message.getWrapperField(this, proto.pharmacy.Subsidiary, 1));
};


/**
 * @param {?proto.pharmacy.Subsidiary|undefined} value
 * @return {!proto.pharmacy.CreateSubsidiaryRequest} returns this
*/
proto.pharmacy.CreateSubsidiaryRequest.prototype.setSubsidiary = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pharmacy.CreateSubsidiaryRequest} returns this
 */
proto.pharmacy.CreateSubsidiaryRequest.prototype.clearSubsidiary = function() {
  return this.setSubsidiary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pharmacy.CreateSubsidiaryRequest.prototype.hasSubsidiary = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pharmacy.GetSubsidiaryByNameRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pharmacy.GetSubsidiaryByNameRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pharmacy.GetSubsidiaryByNameRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.GetSubsidiaryByNameRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nome: jspb.Message.getFieldWithDefault(msg, 1, ""),
    page: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pharmacy.GetSubsidiaryByNameRequest}
 */
proto.pharmacy.GetSubsidiaryByNameRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pharmacy.GetSubsidiaryByNameRequest;
  return proto.pharmacy.GetSubsidiaryByNameRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pharmacy.GetSubsidiaryByNameRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pharmacy.GetSubsidiaryByNameRequest}
 */
proto.pharmacy.GetSubsidiaryByNameRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNome(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pharmacy.GetSubsidiaryByNameRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pharmacy.GetSubsidiaryByNameRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pharmacy.GetSubsidiaryByNameRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.GetSubsidiaryByNameRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNome();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string nome = 1;
 * @return {string}
 */
proto.pharmacy.GetSubsidiaryByNameRequest.prototype.getNome = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.GetSubsidiaryByNameRequest} returns this
 */
proto.pharmacy.GetSubsidiaryByNameRequest.prototype.setNome = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string page = 2;
 * @return {string}
 */
proto.pharmacy.GetSubsidiaryByNameRequest.prototype.getPage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.GetSubsidiaryByNameRequest} returns this
 */
proto.pharmacy.GetSubsidiaryByNameRequest.prototype.setPage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pharmacy.GetAllSubsidiarysRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pharmacy.GetAllSubsidiarysRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pharmacy.GetAllSubsidiarysRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.GetAllSubsidiarysRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pharmacy.GetAllSubsidiarysRequest}
 */
proto.pharmacy.GetAllSubsidiarysRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pharmacy.GetAllSubsidiarysRequest;
  return proto.pharmacy.GetAllSubsidiarysRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pharmacy.GetAllSubsidiarysRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pharmacy.GetAllSubsidiarysRequest}
 */
proto.pharmacy.GetAllSubsidiarysRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pharmacy.GetAllSubsidiarysRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pharmacy.GetAllSubsidiarysRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pharmacy.GetAllSubsidiarysRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.GetAllSubsidiarysRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string page = 1;
 * @return {string}
 */
proto.pharmacy.GetAllSubsidiarysRequest.prototype.getPage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.pharmacy.GetAllSubsidiarysRequest} returns this
 */
proto.pharmacy.GetAllSubsidiarysRequest.prototype.setPage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pharmacy.GetSubsidiaryByIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pharmacy.GetSubsidiaryByIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pharmacy.GetSubsidiaryByIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.GetSubsidiaryByIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pharmacy.GetSubsidiaryByIdRequest}
 */
proto.pharmacy.GetSubsidiaryByIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pharmacy.GetSubsidiaryByIdRequest;
  return proto.pharmacy.GetSubsidiaryByIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pharmacy.GetSubsidiaryByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pharmacy.GetSubsidiaryByIdRequest}
 */
proto.pharmacy.GetSubsidiaryByIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pharmacy.GetSubsidiaryByIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pharmacy.GetSubsidiaryByIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pharmacy.GetSubsidiaryByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.GetSubsidiaryByIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.pharmacy.GetSubsidiaryByIdRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pharmacy.GetSubsidiaryByIdRequest} returns this
 */
proto.pharmacy.GetSubsidiaryByIdRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pharmacy.UpdateSubsidiaryDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.pharmacy.UpdateSubsidiaryDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pharmacy.UpdateSubsidiaryDataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.UpdateSubsidiaryDataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    subsidiary: (f = msg.getSubsidiary()) && proto.pharmacy.UpdateSubsidiaryData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pharmacy.UpdateSubsidiaryDataRequest}
 */
proto.pharmacy.UpdateSubsidiaryDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pharmacy.UpdateSubsidiaryDataRequest;
  return proto.pharmacy.UpdateSubsidiaryDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pharmacy.UpdateSubsidiaryDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pharmacy.UpdateSubsidiaryDataRequest}
 */
proto.pharmacy.UpdateSubsidiaryDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.pharmacy.UpdateSubsidiaryData;
      reader.readMessage(value,proto.pharmacy.UpdateSubsidiaryData.deserializeBinaryFromReader);
      msg.setSubsidiary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pharmacy.UpdateSubsidiaryDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pharmacy.UpdateSubsidiaryDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pharmacy.UpdateSubsidiaryDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.UpdateSubsidiaryDataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSubsidiary();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.pharmacy.UpdateSubsidiaryData.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.pharmacy.UpdateSubsidiaryDataRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.pharmacy.UpdateSubsidiaryDataRequest} returns this
 */
proto.pharmacy.UpdateSubsidiaryDataRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional UpdateSubsidiaryData subsidiary = 2;
 * @return {?proto.pharmacy.UpdateSubsidiaryData}
 */
proto.pharmacy.UpdateSubsidiaryDataRequest.prototype.getSubsidiary = function() {
  return /** @type{?proto.pharmacy.UpdateSubsidiaryData} */ (
    jspb.Message.getWrapperField(this, proto.pharmacy.UpdateSubsidiaryData, 2));
};


/**
 * @param {?proto.pharmacy.UpdateSubsidiaryData|undefined} value
 * @return {!proto.pharmacy.UpdateSubsidiaryDataRequest} returns this
*/
proto.pharmacy.UpdateSubsidiaryDataRequest.prototype.setSubsidiary = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pharmacy.UpdateSubsidiaryDataRequest} returns this
 */
proto.pharmacy.UpdateSubsidiaryDataRequest.prototype.clearSubsidiary = function() {
  return this.setSubsidiary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pharmacy.UpdateSubsidiaryDataRequest.prototype.hasSubsidiary = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pharmacy.SubsidiaryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pharmacy.SubsidiaryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pharmacy.SubsidiaryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.SubsidiaryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    subsidiary: (f = msg.getSubsidiary()) && proto.pharmacy.Subsidiary.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pharmacy.SubsidiaryResponse}
 */
proto.pharmacy.SubsidiaryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pharmacy.SubsidiaryResponse;
  return proto.pharmacy.SubsidiaryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pharmacy.SubsidiaryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pharmacy.SubsidiaryResponse}
 */
proto.pharmacy.SubsidiaryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pharmacy.Subsidiary;
      reader.readMessage(value,proto.pharmacy.Subsidiary.deserializeBinaryFromReader);
      msg.setSubsidiary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pharmacy.SubsidiaryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pharmacy.SubsidiaryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pharmacy.SubsidiaryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.SubsidiaryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubsidiary();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.pharmacy.Subsidiary.serializeBinaryToWriter
    );
  }
};


/**
 * optional Subsidiary subsidiary = 1;
 * @return {?proto.pharmacy.Subsidiary}
 */
proto.pharmacy.SubsidiaryResponse.prototype.getSubsidiary = function() {
  return /** @type{?proto.pharmacy.Subsidiary} */ (
    jspb.Message.getWrapperField(this, proto.pharmacy.Subsidiary, 1));
};


/**
 * @param {?proto.pharmacy.Subsidiary|undefined} value
 * @return {!proto.pharmacy.SubsidiaryResponse} returns this
*/
proto.pharmacy.SubsidiaryResponse.prototype.setSubsidiary = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.pharmacy.SubsidiaryResponse} returns this
 */
proto.pharmacy.SubsidiaryResponse.prototype.clearSubsidiary = function() {
  return this.setSubsidiary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.pharmacy.SubsidiaryResponse.prototype.hasSubsidiary = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pharmacy.SubsidiarysListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pharmacy.SubsidiarysListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.pharmacy.SubsidiarysListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pharmacy.SubsidiarysListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.SubsidiarysListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    subsidiarysList: jspb.Message.toObjectList(msg.getSubsidiarysList(),
    proto.pharmacy.Subsidiary.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pharmacy.SubsidiarysListResponse}
 */
proto.pharmacy.SubsidiarysListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pharmacy.SubsidiarysListResponse;
  return proto.pharmacy.SubsidiarysListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pharmacy.SubsidiarysListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pharmacy.SubsidiarysListResponse}
 */
proto.pharmacy.SubsidiarysListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.pharmacy.Subsidiary;
      reader.readMessage(value,proto.pharmacy.Subsidiary.deserializeBinaryFromReader);
      msg.addSubsidiarys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pharmacy.SubsidiarysListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pharmacy.SubsidiarysListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pharmacy.SubsidiarysListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.SubsidiarysListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubsidiarysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.pharmacy.Subsidiary.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Subsidiary subsidiarys = 1;
 * @return {!Array<!proto.pharmacy.Subsidiary>}
 */
proto.pharmacy.SubsidiarysListResponse.prototype.getSubsidiarysList = function() {
  return /** @type{!Array<!proto.pharmacy.Subsidiary>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.pharmacy.Subsidiary, 1));
};


/**
 * @param {!Array<!proto.pharmacy.Subsidiary>} value
 * @return {!proto.pharmacy.SubsidiarysListResponse} returns this
*/
proto.pharmacy.SubsidiarysListResponse.prototype.setSubsidiarysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.pharmacy.Subsidiary=} opt_value
 * @param {number=} opt_index
 * @return {!proto.pharmacy.Subsidiary}
 */
proto.pharmacy.SubsidiarysListResponse.prototype.addSubsidiarys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.pharmacy.Subsidiary, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.pharmacy.SubsidiarysListResponse} returns this
 */
proto.pharmacy.SubsidiarysListResponse.prototype.clearSubsidiarysList = function() {
  return this.setSubsidiarysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pharmacy.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.pharmacy.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pharmacy.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pharmacy.Empty}
 */
proto.pharmacy.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pharmacy.Empty;
  return proto.pharmacy.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pharmacy.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pharmacy.Empty}
 */
proto.pharmacy.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pharmacy.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pharmacy.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pharmacy.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pharmacy.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.pharmacy);
